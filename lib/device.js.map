{"version":3,"sources":["device.ts"],"names":[],"mappings":"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","file":"device.js","sourcesContent":["/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { LIBUSB_ENDPOINT_IN } from \"usb\";\nimport { USBDirection } from \"./enums\";\nimport {\n    USBControlTransferParameters,\n    USBInTransferResult,\n    USBOutTransferResult,\n    USBIsochronousInTransferResult,\n    USBIsochronousOutTransferResult\n} from \"./interfaces\";\nimport { USBConfiguration } from \"./configuration\";\nimport { USBInterface } from \"./interface\";\nimport { USBEndpoint } from \"./endpoint\";\nimport { adapter } from \"./adapter\";\n\ninterface EndpointResult {\n    endpoint: USBEndpoint;\n    iface: USBInterface;\n}\n\n/**\n * USB Device\n */\nexport class USBDevice {\n\n    /**\n     * Major USB protocol version supported by the device\n     */\n    public readonly usbVersionMajor: number;\n\n    /**\n     * Minor USB protocol version supported by the device\n     */\n    public readonly usbVersionMinor: number;\n\n    /**\n     * Sub minor USB protocol version supported by the device\n     */\n    public readonly usbVersionSubminor: number;\n\n    /**\n     * Communication interface class of the device\n     */\n    public readonly deviceClass: number;\n\n    /**\n     * Communication interface sub class of the device\n     */\n    public readonly deviceSubclass: number;\n\n    /**\n     * Communication interface protocol of the device\n     */\n    public readonly deviceProtocol: number;\n\n    /**\n     * Vendor Identifier of the device\n     */\n    public readonly vendorId: number;\n\n    /**\n     * Product Identifier of the device\n     */\n    public readonly productId: number;\n\n    /**\n     * Major version of the device\n     */\n    public readonly deviceVersionMajor: number;\n\n    /**\n     * Minor version of the device\n     */\n    public readonly deviceVersionMinor: number;\n\n    /**\n     * Sub minor version of the device\n     */\n    public readonly deviceVersionSubminor: number;\n\n    /**\n     * Manufacturer name of the device\n     */\n    public readonly manufacturerName: string = null;\n\n    /**\n     * Product name of the device\n     */\n    public readonly productName: string = null;\n\n    /**\n     * Serial number of the device\n     */\n    public readonly serialNumber: string = null;\n\n    private _configurations: Array<USBConfiguration> = [];\n    /**\n     * List of configurations supported by the device\n     */\n    public get configurations(): Array<USBConfiguration> {\n        return this._configurations;\n    }\n\n    /**\n     * @hidden\n     */\n    public _currentConfiguration: number = null;\n    /**\n     * The currently selected configuration\n     */\n    public get configuration(): USBConfiguration {\n        return this.configurations.find(configuration => configuration.configurationValue === this._currentConfiguration);\n    }\n\n    /**\n     * @hidden\n     */\n    public get connected(): boolean {\n        return adapter.getConnected(this._handle);\n    }\n\n    /**\n     * A flag indicating whether the device is open\n     */\n    public get opened(): boolean {\n        return adapter.getOpened(this._handle);\n    }\n\n    /**\n     * URL advertised by the device (not part of Web USB specification)\n     */\n    public readonly url: string = null;\n\n    /**\n     * @hidden\n     */\n    public readonly _maxPacketSize: number = 0;\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBDevice>) {\n        this.usbVersionMajor = init.usbVersionMajor;\n        this.usbVersionMinor = init.usbVersionMinor;\n        this.usbVersionSubminor = init.usbVersionSubminor;\n        this.deviceClass = init.deviceClass;\n        this.deviceSubclass = init.deviceSubclass;\n        this.deviceProtocol = init.deviceProtocol;\n        this.vendorId = init.vendorId;\n        this.productId = init.productId;\n        this.deviceVersionMajor = init.deviceVersionMajor;\n        this.deviceVersionMinor = init.deviceVersionMinor;\n        this.deviceVersionSubminor = init.deviceVersionSubminor;\n\n        this.manufacturerName = init.manufacturerName;\n        this.productName = init.productName;\n        this.serialNumber = init.serialNumber;\n\n        this._configurations = init.configurations;\n\n        this.url = init.url;\n        this._maxPacketSize = init._maxPacketSize;\n        this._handle = init._handle;\n        this._currentConfiguration = init._currentConfiguration;\n    }\n\n    private getEndpoint(direction: string, endpointNumber: number): EndpointResult {\n        let endpoint = null;\n        let iface = null;\n\n        this.configuration.interfaces.some(usbInterface => {\n            iface = usbInterface;\n            endpoint = iface.alternate.endpoints.find(usbEndpoint => {\n                return (usbEndpoint.endpointNumber === endpointNumber && usbEndpoint.direction === direction);\n            });\n\n            return endpoint;\n        });\n\n        return {\n            endpoint: endpoint,\n            iface: iface\n        };\n    }\n\n    private setupInvalid(setup: USBControlTransferParameters): string {\n        if (setup.recipient === \"interface\") {\n            const interfaceNumber = setup.index & 0xff; // lower 8 bits\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return \"interface not found\";\n            if (!iface.claimed) return \"invalid state\";\n\n        } else if (setup.recipient === \"endpoint\") {\n            const endpointNumber = setup.index & 0x0f; // lower 4 bits\n            const direction = setup.index & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return \"endpoint not found\";\n            if (!result.iface.claimed) return \"invalid state\";\n        }\n    }\n\n    /**\n     * Opens the device\n     */\n    public open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"open error: device not found\"));\n            if (this.opened) return resolve();\n\n            adapter.open(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`open error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Closes the device\n     */\n    public close(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"close error: device not found\"));\n            if (!this.opened) return resolve();\n\n            adapter.close(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`close error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select a configuration for the device\n     * @param configurationValue The configuration value to select\n     * @returns Promise containing any error\n     */\n    public selectConfiguration(configurationValue: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            // Don't change the configuration if it's already set correctly\n            if (configurationValue === this._currentConfiguration) return resolve();\n\n            if (!this.connected) return reject(new Error(\"selectConfiguration error: device not found\"));\n\n            const config =  this.configurations.find(configuration => configuration.configurationValue === configurationValue);\n            if (!config) return reject(new Error(\"selectConfiguration error: configuration not found\"));\n\n            if (!this.opened) return reject(new Error(\"selectConfiguration error: invalid state\"));\n\n            adapter.selectConfiguration(this._handle, configurationValue)\n            .then(() => {\n                this._currentConfiguration = configurationValue;\n                this.configuration.interfaces.forEach(iface => iface.reset());\n                resolve();\n            })\n            .catch(error => {\n                reject(new Error(`selectConfiguration error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Claim an interface on the device\n     * @param interfaceNumber The interface number to claim\n     * @returns Promise containing any error\n     */\n    public claimInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"claimInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"claimInterface error: interface not found\"));\n\n            if (!this.opened || iface.claimed) return reject(new Error(\"claimInterface error: invalid state\"));\n\n            iface.claimInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`claimInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Release an interface on the device\n     * @param interfaceNumber The interface number to release\n     * @returns Promise containing any error\n     */\n    public releaseInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"releaseInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"releaseInterface error: interface not found\"));\n\n            if (!this.opened || !iface.claimed) return reject(new Error(\"releaseInterface error: invalid state\"));\n\n            iface.releaseInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`releaseInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select an alternate interface on the device\n     * @param interfaceNumber The interface number to change\n     * @param alternateSetting The alternate setting to use\n     * @returns Promise containing any error\n     */\n    public selectAlternateInterface(interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"selectAlternateInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"selectAlternateInterface error: interface not found\"));\n\n            if (!this.opened || !iface.claimed) return reject(new Error(\"selectAlternateInterface error: invalid state\"));\n\n            iface.selectAlternateInterface(alternateSetting)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`selectAlternateInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer in from the device\n     *\n     * __Note:__ The transfer result currently has a status always set to \"ok\"\n     *\n     * @param setup The USB control transfer parameters\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferIn(setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferIn error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferIn error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferIn error: ${setupError}`));\n\n            if (length > this._maxPacketSize) return reject(new Error(\"controlTransferIn error: length exceeds the maximum packet size\"));\n\n            adapter.controlTransferIn(this._handle, setup, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer out to the device\n     *\n     * __Note:__ The transfer result currently has a status always set to \"ok\" and the bytesWritten always set to the length of the data\n     *\n     * @param setup The USB control transfer parameters\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferOut(setup: USBControlTransferParameters, data?: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferOut error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferOut error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferOut error: ${setupError}`));\n\n            if (data.byteLength > this._maxPacketSize) return reject(new Error(\"controlTransferOut error: length exceeds the maximum packet size\"));\n\n            adapter.controlTransferOut(this._handle, setup, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Clear a halt condition on an endpoint\n     *\n     * @param direction The direction of the endpoint to clear\n     * @param endpointNumber The endpoint number of the endpoint to clear\n     * @returns Promise containing any error\n     */\n    public clearHalt(direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"clearHalt error: device not found\"));\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"clearHalt error: endpoint not found\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"clearHalt error: invalid state\"));\n\n            adapter.clearHalt(this._handle, endpointNumber)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`clearHalt error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer in from the device\n     *\n     * __Note:__ The transfer result currently has a status always set to \"ok\"\n     *\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public transferIn(endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferIn error: invalid state\"));\n\n            adapter.transferIn(this._handle, endpointNumber, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer out to the device\n     *\n     * __Note:__ The transfer result currently has a status always set to \"ok\" and the bytesWritten always set to the length of the data\n     *\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public transferOut(endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferOut error: invalid state\"));\n\n            adapter.transferOut(this._handle, endpointNumber, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer in from the device\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferIn(endpointNumber: number, packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferIn error: invalid state\"));\n\n            adapter.isochronousTransferIn(this._handle, endpointNumber, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer out to the device\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferOut(endpointNumber: number, data: BufferSource, packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferOut error: invalid state\"));\n\n            adapter.isochronousTransferOut(this._handle, endpointNumber, data, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Soft reset the device\n     * @returns Promise containing any error\n     */\n    public reset(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"reset error: device not found\"));\n            if (!this.opened) return reject(new Error(\"reset error: invalid state\"));\n\n            adapter.reset(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`reset error: ${error}`));\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}